{
  "series": [
    {
      "color": "rgb(220, 68, 14)",
      "data": [
        [
          2010,
          0.712715736
        ],
        [
          2011,
          0.703794982
        ],
        [
          2012,
          0.698304205
        ],
        [
          2013,
          0.719753993
        ],
        [
          2014,
          0.723168077
        ],
        [
          2015,
          0.710086965
        ],
        [
          2016,
          0.708969466
        ],
        [
          2017,
          0.687306341
        ],
        [
          2018,
          0.704086997
        ],
        [
          2019,
          0.714705637
        ]
      ],
      "name": "Mo-Do"
    },
    {
      "color": "rgb(68, 141, 43)",
      "data": [
        [
          2010,
          0.476080367
        ],
        [
          2011,
          0.480256528
        ],
        [
          2012,
          0.471786578
        ],
        [
          2013,
          0.487181156
        ],
        [
          2014,
          0.496758848
        ],
        [
          2015,
          0.503085352
        ],
        [
          2016,
          0.491981573
        ],
        [
          2017,
          0.511537324
        ],
        [
          2018,
          0.528479558
        ],
        [
          2019,
          0.554665042
        ]
      ],
      "name": "Fr-So"
    },
    {
      "color": "rgb(250, 189, 36)",
      "data": [
        [
          2010,
          0.610991777
        ],
        [
          2011,
          0.607864899
        ],
        [
          2012,
          0.601275881
        ],
        [
          2013,
          0.620405741
        ],
        [
          2014,
          0.626545043
        ],
        [
          2015,
          0.621628807
        ],
        [
          2016,
          0.615605161
        ],
        [
          2017,
          0.611833344
        ],
        [
          2018,
          0.629092612
        ],
        [
          2019,
          0.646343677
        ]
      ],
      "name": "Mo-So"
    }
  ],
  "chart": {
    "events": {
      "load": function () {
          this.credits.element.onclick = function () { };

          //for top-left legends with no x defined: move legend to x position of first yAxis
          if (this['legend']['options']['align'] == 'left' && this['legend']['options']['verticalAlign'] == 'top' && this['legend']['options']['x'] == 0) {
            this.update(
              {
                legend: {
                  x: this.yAxis[0].left - this.spacingBox.x - this.legend.padding
                }
              }
            );
          }
          /*
          //move legend title
           var title = this.legend.title;
           title.translate(-250, 40);
           */
        }
    },
    "borderColor": "#fbfbfb",
    "backgroundColor": "#fbfbfb",
    "zoomType": "xy",
    "width": 485,
    "height": 428,
    "spacingBottom": 55,
    "style": {
      "fontFamily": "Arial"
    },
    "type": "line",
    "renderTo": "container-6540"
  },
  "title": {
    "style": {
      "fontSize": "14px",
      "fontWeight": "bold",
      "color": "#000000"
    },
    "align": "left",
    "text": "Nettozimmerauslastung nach Wochentag"
  },
  "subtitle": {
    "style": {
      "fontSize": "12px",
      "fontWeight": "normal",
      "fontFamily": "Arial",
      "color": "#000000"
    },
    "text": "Basel-Stadt",
    "align": "left"
  },
  "tooltip": {
    "shared": false,
    "pointFormatter": function () {
        return '<span style="color:' + this.series.color + '">\u25CF</span> ' + this.series.name + ': <b>' + Highcharts.numberFormat(100 * this.y, 1, ",", " ") + '%</b><br/>';
      }
  },
  "yAxis": {
    "min": 0,
    "gridLineColor": "#B9CFD7",
    "gridLineWidth": 0.5,
    "title": {
      "style": {
        "color": "#000000",
        "fontSize": null
      },
      "text": null
    },
    "labels": {
      "style": {
        "color": "#000000"
      },
      "formatter": function () {
          return 100 * this.value + "%";
        }
    }
  },
  "xAxis": {
    "lineColor": "#B9CFD7",
    "lineWidth": 0.5,
    "labels": {
      "style": {
        "color": "#000000",
        "textOverflow": "none"
      }
    },
    "tickLength": 0,
    "tickInterval": 1
  },
  "credits": {
    "href": "http:\u002F\u002Fwww.statistik.bs.ch",
    "enabled": true,
    "style": {
      "color": "#000000",
      "fontSize": "10px",
      "cursor": "default"
    },
    "position": {
      "align": "left",
      "verticalAlign": "bottom",
      "x": 10,
      "y": -25
    },
    "text": "Quelle: Statistisches Amt Basel-Stadt, Tourismusstatistik.\u003Cbr\u002F\u003EZuletzt geÃ¤ndert: 2020-2-17"
  },
  "legend": {
    "enabled": true,
    "layout": "horizontal",
    "verticalAlign": "top",
    "align": "left",
    "symbolRadius": 0,
    "itemStyle": {
      "fontWeight": "normal",
      "width": 40
    },
    "useHTML": true,
    "itemMarginBottom": 5,
    "width": 210,
    "itemWidth": 70,
    "labelFormatter": function () {
        //remove text before year on each item with odd index
        //return (this.index % 3 != 0) ? this.name.slice(-5) : this.name;
        return this.name.slice(-5);
      }
  },
  "plotOptions": {
    "series": {
      "marker": {
        "enabled": false
      }
    },
    "line": {
      "marker": {
        "symbol": "circle",
        "lineWidth": 2,
        "lineColor": null
      }
    }
  },
  "customFunctions": {
    "optimalAxisLabelDecimals": function(axis, formatString){
          
          //see https://forum.highcharts.com/highcharts-usage/how-to-have-all-yaxis-labels-show-same-number-of-decimals-t40826/ 
        	//function checks how many decimal places has a number
          var countDecimals = function(value) {
            if ((value % 1) != 0)
              return value.toString().split(".")[1].length;
            return 0;
          };
          
          var ticks = axis.tickPositions;
          var howManyDecimals = 0;
					
          //loop looks for the the largest number of decimal places
          ticks.forEach(function(tick) {
            if (countDecimals(tick) > howManyDecimals) {
              howManyDecimals = countDecimals(tick);
            }
          });
					
					
          //update labels so they have the same number of decimal places
          axis.chart.update({
            yAxis: [{
              labels: {
                //format: '{value:,.' + howManyDecimals + 'f}',
                format: formatString.replace('howManyDecimals', howManyDecimals),
              }
            }, {
            	//second yAxis, if present
            }]
          }, true, true);
    }
  },
  "exporting": {
    "filename": 6540
  }
}